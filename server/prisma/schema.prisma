// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  doctor
  patient
  admin
  moderator
  organization
}


enum UserStatus {
  active
  inactive
  suspended
  blocked
  deleted
}

enum ItemType {
  post
  forum
}

enum AttachmentType {
  image
  video
  file
}

enum GroupChatRole {
  member
  admin
  owner
}

enum MessageType {
  one_to_one
  group
}

enum Gender {
  Male
  Female
}

enum AppointmentStatus {
  Scheduled
  Completed
  Cancelled
}

enum ConsultancyType {
  InitialConsultation
  FollowUp
  Emergency
}

enum ScheduleStatus {
  Active
  Inactive
  TemporarilyUnavailable
}

enum ConsultancyStatus {
  Scheduled
  Completed
  Cancelled
}

enum ChannelType {
  DM
  SupportGroup
}

enum Role {
  member
  moderator
  admin
  guest
  banned
}

enum LikeType {
  forumAnswer
  post
}

enum CommentableType {
  forumAnswer
  post
}

enum FeedbackType {
  GeneralFeedback
  ProductReview
  
  ServiceReview
}

model Users {
  UserID                String              @id
  Username              String              @unique
  FirstName             String?
  LastName              String?
  Email                 String              @unique
  DateOfBirth           DateTime?
  Gender                Gender?
  Bio                   String?             @db.LongText
  PhoneNumber           String?
  Address               String?
  ProfilePicture        String?
  Role                  UserType
  Status                UserStatus
  Verified              Boolean             @default(false)
  CreatedAt             DateTime            @default(now())
  UpdatedAt             DateTime            @updatedAt
  LastLogin             DateTime?
  MedicalRecord         MedicalRecord[]
  DoctorDetails         DoctorDetails?
  UserSessions          UserSessions[]
  Reviews               DoctorReviews[]
  Appointments          Appointments[]
  AppointmentsCancelled Appointments[]      @relation("appointmentCancelledby")
  Consultancy           Consultancy[]
  PatientBooking        Booking[]           @relation("patientBooking")
  BookingCancelled      Booking[]
  ForumPost             ForumPost[]
  ForumAnswer           ForumAnswer[]
  Comment               Comments[]
  Like                  Likes[]
  Views                 Views[]
  Prescription          Prescription[]
  Feedback              UserFeedback[]
  FeedbackReply         Reply[]
  ChatMessage           ChatMessage[]
  VideoChatMemebers     MemberInVideoChat[]
  ChannelMemeber        ChannelMember[]

  @@index([Email], name: "email_index")
}



model MedicalRecord {
  RecordID     String   @id @default(uuid())
  UserID       String
  DateOfRecord DateTime @default(now())
  Diagnosis    Json?
  Medications  Json?
  Allergies    Json?
  Patient      Users    @relation(fields: [UserID], references: [UserID])
}


model DoctorDetails {
  DoctorID                  String          @id @unique
  Speciality                 String?
  ConsultationFee           Decimal?
  EducationalQualifications Json?
  LicenseNumber             String?
  ExperienceYears           Int?
  User                      Users            @relation(fields: [DoctorID], references: [UserID])
  Schedules                 DoctorSchedule[]
  Reviews                   DoctorReviews[]
  Appointments              Appointments[]
  Consultancy               Consultancy[]
  Booking                   Booking[]
  Blog                      BlogPost[]
  Post                      Post[]
  Prescription              Prescription[]
  Payment                   Payment[]
  VideoChatRoom             VideoChatRoom[]
  @@index([Speciality], name: "Speciality_index")
}

model DoctorSchedule {
  ScheduleID      String          @id @default(uuid())
  DoctorID        String
  ConsultancyType ConsultancyType
  Date            DateTime
  AvailableTimes  Json?
  Duration        Int?
  Status          ScheduleStatus?
  Priority        Int?
  Notes           String?
  CreatedAt       DateTime        @default(now())
  UpdatedAt       DateTime        @updatedAt
  Doctor          DoctorDetails   @relation(fields: [DoctorID], references: [DoctorID])
}

model Appointments {
  AppointmentID   String            @id @default(uuid())
  DoctorID        String
  PatientID       String
  AppointmentDate DateTime
  AppointmentTime DateTime
  Duration        Int
  Status          AppointmentStatus
  Notes           String?
  CreatedAt       DateTime          @default(now())
  UpdatedAt       DateTime          @updatedAt
  CancelledBy     String?           @unique
  CancelledReason String?
  Doctor          DoctorDetails     @relation(fields: [DoctorID], references: [DoctorID])
  Patient         Users             @relation(fields: [PatientID], references: [UserID])
  Cancelled       Users?            @relation("appointmentCancelledby", fields: [CancelledBy], references: [UserID])
  Booking         Booking[]
  Payment         Payment?

  @@index([Status], name: "status_index")
  @@index([DoctorID, PatientID], name: "doctor_patient_index")
}

model Booking {
  BookingID       String        @id @default(uuid())
  CreatedAt       DateTime      @default(now())
  UpdatedAt       DateTime      @updatedAt
  Status          String        @default("Pending")
  PatientID       String
  DoctorID        String
  AppointmentID   String        @unique
  ReminderSent    Boolean       @default(false)
  ReminderDate    DateTime?
  CancelledBy     String?       @unique
  CancelledReason String?
  Doctor          DoctorDetails @relation(fields: [DoctorID], references: [DoctorID])
  Patient         Users         @relation("patientBooking", fields: [PatientID], references: [UserID])
  Appointment     Appointments? @relation(fields: [AppointmentID], references: [AppointmentID])
  Cancelled       Users?        @relation(fields: [CancelledBy], references: [UserID])

  @@index([DoctorID], name: "patient_doctor_index")
}

model Consultancy {
  ConsultancyID   String            @id @default(uuid())
  DoctorID        String
  PatientID       String
  ConsultancyDate DateTime
  ConsultancyTime DateTime
  Duration        Int
  Status          ConsultancyStatus
  ConsultancyType ConsultancyType
  Notes           String?           @db.LongText
  CreatedAt       DateTime          @default(now())
  UpdatedAt       DateTime          @updatedAt
  CancelledBy     String?
  CancelledReason String?
  Doctor          DoctorDetails     @relation(fields: [DoctorID], references: [DoctorID])
  Patient         Users             @relation(fields: [PatientID], references: [UserID])
  Payment         Payment?
  VideoChatRoom   VideoChatRoom[]

  @@index([Status], name: "consultancy_status_index")
}

model VideoChatRoom {
  RoomID         String              @id
  Name           String
  HostId         String
  MemberId       String
  HostAuthToken  String              @db.LongText
  ConstultancyID String?
  CreatedAt      DateTime            @default(now())
  UpdatedAt      DateTime            @updatedAt
  Host           DoctorDetails       @relation(fields: [HostId], references: [DoctorID])
  Constultation  Consultancy?        @relation(fields: [ConstultancyID], references: [ConsultancyID])
  Members        MemberInVideoChat[]
}

model MemberInVideoChat {
  UserId          String        @unique
  VideoChatRoomID String
  MemberAuthToken String        @db.LongText
  User            Users         @relation(fields: [UserId], references: [UserID])
  VideoChatRoom   VideoChatRoom @relation(fields: [VideoChatRoomID], references: [RoomID])
}

// model that stores both dms and group chats it also stores PeerSupport group informations as channel
model ChatChannel {
  ChannelID   String          @unique
  ChannelName String
  Image       String?
  Description String?         @db.Text
  Disease     String?
  ChannelType ChannelType
  CreatedAt   DateTime        @default(now())
  UpdatedAt   DateTime        @updatedAt
  ChatMessage ChatMessage[]
  Members     ChannelMember[]
}

model ChatMessage {
  ChatID    String      @id 
  Content   String
  SenderID  String
  MediaUrl  String?
  SentAt    DateTime    @default(now())
  IsSeen    Boolean     @default(false)
  ChannelID String
  Sender    Users       @relation(fields: [SenderID], references: [UserID])
  Channel   ChatChannel @relation(fields: [ChannelID], references: [ChannelID])
}

model ChannelMember {
  UserID           String      @unique
  ChannelID        String
  AuthToken        String      @db.LongText
  Role             Role        @default(member)
  JoinedAt         DateTime?   @default(now())
  CreatedAt        DateTime?   @default(now())
  UpdatedAt        DateTime?   @updatedAt
  User             Users       @relation(fields: [UserID], references: [UserID])
  PeerSupportGroup ChatChannel @relation(fields: [ChannelID], references: [ChannelID])
}

model Payment {
  PaymentID     String        @id @default(uuid())
  DoctorID      String
  Amount        Float
  PaymentDate   DateTime      @default(now())
  PaymentMethod String
  Status        String
  AppointmentID String?       @unique
  ConsultancyID String?       @unique
  Doctor        DoctorDetails @relation(fields: [DoctorID], references: [DoctorID])
  Appointment   Appointments? @relation(fields: [AppointmentID], references: [AppointmentID])
  Consultancy   Consultancy?  @relation(fields: [ConsultancyID], references: [ConsultancyID])

  @@index([DoctorID], name: "doctor_payment_index")
}

model DoctorReviews {
  ReviewID   String        @id @default(uuid())
  DoctorID   String
  ReviewerID String
  Rating     Int?
  ReviewText String?
  ReviewDate DateTime      @default(now())
  Doctor     DoctorDetails @relation(fields: [DoctorID], references: [DoctorID])
  Reviewer   Users         @relation(fields: [ReviewerID], references: [UserID])

  @@index([DoctorID], name: "doctor_review_index")
}

model BlogPost {
  BlogID      String        @id @default(uuid())
  Title       String
  Content     String
  CreatedAt   DateTime      @default(now())
  UpdatedAt   DateTime      @updatedAt
  IsPublished Boolean       @default(false)
  DoctorID    String
  Doctor      DoctorDetails @relation(fields: [DoctorID], references: [DoctorID])
  View        Views[]
}

model ForumPost {
  ForumPostID String        @id @default(uuid())
  Content     String
  CreatedAt   DateTime      @default(now())
  UpdatedAt   DateTime      @updatedAt
  UserID      String
  User        Users         @relation(fields: [UserID], references: [UserID])
  Answers     ForumAnswer[]
}

model ForumAnswer {
  ForumAnswerID String     @id @default(uuid())
  Content       String
  CreatedAt     DateTime   @default(now())
  UpdatedAt     DateTime   @updatedAt
  ForumPostID   String
  ForumPost     ForumPost  @relation(fields: [ForumPostID], references: [ForumPostID])
  UserID        String
  User          Users      @relation(fields: [UserID], references: [UserID])
  Comment       Comments[]
  Like          Likes[]
}

model Post {
  PostID    String        @id @default(uuid())
  Content   String
  MediaUrl  String?
  CreatedAt DateTime      @default(now())
  UpdatedAt DateTime      @updatedAt
  DoctorID  String
  Doctor    DoctorDetails @relation(fields: [DoctorID], references: [DoctorID])
  View      Views[]
  Comment   Comments[]
  Like      Likes[]
}

model Comments {
  CommentID       String          @id @default(uuid())
  Content         String
  CreatedAt       DateTime        @default(now())
  UpdatedAt       DateTime        @updatedAt
  UserID          String
  User            Users           @relation(fields: [UserID], references: [UserID])
  ItemID          String
  ParentComment   Comments?       @relation("ParentComment", fields: [ParentCommentID], references: [CommentID])
  ParentCommentID String?
  Replies         Comments[]      @relation("ParentComment")
  Like            Likes[]
  ItemType        CommentableType
  Post            Post?           @relation(fields: [ItemID], references: [PostID])
  ForumAnswer     ForumAnswer?    @relation(fields: [ItemID], references: [ForumAnswerID], map: "forumanswer_fkey")
}

model Likes {
  LikeID      String       @id @default(uuid())
  UserID      String
  User        Users        @relation(fields: [UserID], references: [UserID])
  ItemID      String
  ItemType    LikeType
  CreatedAt   DateTime     @default(now())
  Post        Post?        @relation(fields: [ItemID], references: [PostID])
  ForumAnswer ForumAnswer? @relation(fields: [ItemID], references: [ForumAnswerID], map: "forum_answer_fkey")
  Comment     Comments?    @relation(fields: [ItemID], references: [CommentID], map: "commet_fkey")
}

model Views {
  ViewID    String          @id @default(uuid())
  UserID    String?
  User      Users?          @relation(fields: [UserID], references: [UserID])
  ItemID    String
  ItemType  CommentableType
  CreatedAt DateTime        @default(now())
  BlogPost  BlogPost?       @relation(fields: [ItemID], references: [BlogID])
  Post      Post?           @relation(fields: [ItemID], references: [PostID], map: "post_view_fkey")
}

model FAQ {
  FAQID     String   @id @default(uuid())
  Question  String
  Answer    String
  Order     Int      @default(0)
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
}

model UserFeedback {
  FeedbackID String       @id @default(uuid())
  UserID     String
  User       Users        @relation(fields: [UserID], references: [UserID])
  Content    String
  CreatedAt  DateTime     @default(now())
  UpdatedAt  DateTime     @updatedAt
  Type       FeedbackType
  Rating     Int? // Optional, for reviews
  Review     String? // Optional, for reviews
  Replies    Reply[]
}

model Reply {
  ReplyID    String       @id @default(uuid())
  FeedbackID String
  Feedback   UserFeedback @relation(fields: [FeedbackID], references: [FeedbackID])
  Content    String
  CreatedAt  DateTime     @default(now())
  UpdatedAt  DateTime     @updatedAt
  UserID     String
  User       Users        @relation(fields: [UserID], references: [UserID])
}

model Prescription {
  PrescriptionID    String                   @id @default(uuid())
  DoctorID          String
  Doctor            DoctorDetails            @relation(fields: [DoctorID], references: [DoctorID])
  PatientID         String
  Patient           Users                    @relation(fields: [PatientID], references: [UserID])
  IssuedAt          DateTime                 @default(now())
  ValidUntil        DateTime?
  Notes             String?
  Status            String?
  PrescriptionItems PrescriptionItem[]
  Attachment        PrescriptionAttachment[]
}

model PrescriptionItem {
  PrescriptionItemID String       @id @default(uuid())
  PrescriptionID     String
  Prescription       Prescription @relation(fields: [PrescriptionID], references: [PrescriptionID])
  MedicationName     String
  Dosage             String
  Instructions       String?
  Quantity           Int?
  Frequency          String?
  Duration           String?
}

model PrescriptionAttachment {
  AttachmentID   String       @id @default(uuid())
  PrescriptionID String
  Prescription   Prescription @relation(fields: [PrescriptionID], references: [PrescriptionID])
  URL            String
  Filename       String
  Size           Int
  Caption        String?
  FileType       String
}

model UserSessions {
  SessionID    String    @id @default(uuid())
  UserID       String
  SessionToken String
  SessionStart DateTime  @default(now())
  SessionEnd   DateTime?
  IPAddress    String?
  UserAgent    String?
  User         Users     @relation(fields: [UserID], references: [UserID])

  @@index([UserID], name: "user_session_index")
}
