
enum UserType {
    doctor,
    patient,
    admin,
    moderator,
    organization
  }

enum UserStatus{
  active
  inactive   
  suspended
  blocked
  deleted

}

enum Gender {
  Male
  Female
}

scalar Date

type User{
   UserID: String!
   Username: String!
   Email: String
   FirstName: String
   LastName: String
   Bio: String
   PhoneNumber: String
   Address: String
   ProfilePicture:String
   Role: UserType!
   Status: UserStatus!
   Verified: Boolean!
}

type Doctor{
  User:User!
  Speciality:String
  ExperienceYears:Int
  ConsultationFee:Float
  Education:String
}

input UserDetailsInput {
  UserID:String!
  FirstName: String
  LastName: String
  Username: String
  Email: String!
  DateOfBirth: Date
  Gender: Gender
  Bio: String
  PhoneNumber: String
  Address: String 
  ProfilePicture: String
  Role:UserType!
}

input DoctorDetailInput {
  UserDetails: UserDetailsInput
  Speciality: String
  LicenseNumber: String
  ExperienceYears:Int
}

type Query {
  users: [User]!
  user(id: Int!): User
}


type Mutation {
  RegisterUser(RegisterInput: UserDetailsInput!): User!
  DoctorRegister(DoctorDetailInput:DoctorDetailInput!):Doctor!
  removeUser(id: Int!): User!
}


input LoginInput {
  UsernameOrEmail: String!
  Password: String!
}








