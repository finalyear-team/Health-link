enum WeekDay{
  monday,
  tuesday,
  wednesday,
  thursday,
  friday,
  saturday,
  sunday,
}
enum Status{
  available,
  unavailable
}

enum ScheduleType{
  emergency
  normal
}

scalar Date


type Schedule {
  ScheduleID:String
  WeekDay:WeekDay
  Date: Date
  StartTime:Date
  EndTime:Date
  Note:String
  Status:Status
  ScheduleType:ScheduleType
}

type Appointment {
  AppointmentID:String!
  DoctorID:String!
  PatientID:String!
  ScheduleID:String
  AppointmentDate:Date!
  AppointmentTime:Date!
  Duration:Int
  PatientName:String
  PatientPhoto:String
  PatientGender:Gender
  PatientDOB:Date
  CreatedAt:Date
  DoctorGender:Gender
  DoctorName:String
  DoctorPhoto:String
  Status:AppointmentStatus
  AppointmentType:AppointmentType
  Note:String
}

input CreateScheduleInput{
  DoctorID:String!
  WeekDay:[WeekDay]
  Date:Date
  StartTime:Date!
  EndTime:Date!
  Note:String
}

input EmergencyScheduleInput{
  DoctorID:String!
  EndTime:Date
}

input UpdateScheduleInput{
  ScheduleID:String!
  DoctorID:String!
  WeekDay:WeekDay
  Date:Date
  StartTime:Date
  EndTime:Date
  Note:String
  Status:Status
}


input SearchScheduleInput{
  DoctorID:String!
}

type BookedTimes{
  StartTime:Date
  EndTime:Date
}

type AvailableSchedules{
  Schedule:[Schedule]
  BookedTimes:[BookedTimes]
}

type Query {  
  Schedules(DoctorID:String!): [Schedule]
  EmergencySchedules:[Schedule]
  GetScheduleByDate(DoctorID:String!,Date:String!):AvailableSchedules
}


type Mutation {
  CreateSchedule(createScheduleInput: CreateScheduleInput!,unselectedDays:[WeekDay]): [Schedule]
  UpdateSchedule(updateScheduleInput: UpdateScheduleInput!): Schedule!
  CreateEmergencySchedule(emergencyScheduleInput: EmergencyScheduleInput!): Schedule!
  RemoveSchedule(id: Int!): Schedule
}
